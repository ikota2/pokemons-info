{"version":3,"sources":["components/Properties/Properties.js","components/Pokemon/Pokemon.js","components/Pagination/Pagination.js","components/List/List.js","loadPokemons.js","App.js","serviceWorker.js","index.js"],"names":["Properties","height","weight","className","Pokemon","id","name","useState","properties","setProperties","a","axios","response","data","console","log","src","alt","onClick","Pagination","page","useParams","href","Number","List","pokemons","setPokemons","useEffect","offset","then","results","map","obj","theId","url","slice","transformPokemonData","loadPokemons","nextPokemons","prev","pokemon","key","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0ZAGO,SAASA,EAAT,GAAyC,IAAnBC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACnC,OACE,yBAAKC,UAAU,cACb,0BAAMA,UAAU,uBAAhB,WACA,0BAAMA,UAAU,uBAAuBF,GACvC,0BAAME,UAAU,uBAAhB,WACA,0BAAMA,UAAU,uBAAuBD,I,MCJtC,SAASE,EAAT,GAAgC,IAAbC,EAAY,EAAZA,GAAIC,EAAQ,EAARA,KAAQ,EACAC,mBAAS,MADT,mBAC7BC,EAD6B,KACjBC,EADiB,iDAkBpC,kCAAAC,EAAA,+EAE2BC,IAAM,qCAAD,OAAsCN,EAAtC,MAFhC,OAEUO,EAFV,SAG+BA,EAASC,KAA5BZ,EAHZ,EAGYA,OAAQC,EAHpB,EAGoBA,OAChBO,EAAc,CACZR,SACAC,WANN,gDASIY,QAAQC,IAAI,QAAZ,MATJ,0DAlBoC,sBA8BpC,OACE,yBAAKZ,UAAU,iBACb,yBACEa,IAAG,mFAA8EX,EAA9E,QACHY,IAAI,cACJd,UAAU,sBAEZ,0BAAMA,UAAU,sBAAsBG,GACtB,OAAfE,EACC,4BAAQU,QAvCsB,2CAuCHf,UAAU,6BAArC,YAIA,kBAACH,EAAD,CAAYC,OAAQO,EAAWP,OAAQC,OAAQM,EAAWN,U,MC5C3D,SAASiB,IAAc,IACpBC,EAASC,cAATD,KACR,OACE,yBAAKjB,UAAU,cACZiB,GAAQ,GACP,uBAAGE,KAAI,mBAAcC,OAAOH,GAAQ,GAAKjB,UAAU,oBAAnD,YAIF,uBAAGmB,KAAI,mBAAcC,OAAOH,GAAQ,GAAKjB,UAAU,oBAAnD,S,MCNC,SAASqB,IAAQ,IAAD,EACWjB,mBAAS,IADpB,mBACdkB,EADc,KACJC,EADI,KAEbN,EAASC,cAATD,KAWR,OATAO,qBACE,YCLG,SAAsBP,GAC3B,IACMQ,EADQ,EACSR,EACvB,OAAOT,IAAM,4CAAD,OACkCiB,EADlC,kBAFE,IAIZC,MAAK,SAACjB,GACN,OAAOA,EAASC,KAAKiB,QAAQC,KAAI,SAACC,GAAD,OAXrC,SAA8BA,GAC5B,IAAIC,EAAQD,EAAIE,IAAIC,MAAM,IAAK,GAC/B,MAAO,CAAE7B,KAAM0B,EAAI1B,KAAMD,GAAI4B,GASeG,CAAqBJ,UDA7DK,CAAajB,GAAMS,MAAK,SAACS,GACvBZ,GAAY,SAACa,GAAD,4BAAcA,GAAd,YAAuBD,YAGvC,CAAClB,IAID,yBAAKjB,UAAU,iBACb,kBAACgB,EAAD,MACCM,EAASM,KAAI,SAACS,GAAD,OACZ,kBAACpC,EAAD,CAASqC,IAAKD,EAAQnC,GAAIA,GAAImC,EAAQnC,GAAIC,KAAMkC,EAAQlC,W,METjDoC,MAVf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwC,KAAK,iBAAiBC,UAAWpB,OCG5BqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.7eed171a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./properties.css\";\n\nexport function Properties({ height, weight }) {\n  return (\n    <div className='properties'>\n      <span className='properties__details'>height:</span>\n      <span className='properties__details'>{height}</span>\n      <span className='properties__details'>weight:</span>\n      <span className='properties__details'>{weight}</span>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Properties } from \"../Properties/Properties\";\nimport \"./pokemon.css\";\n\nexport function Pokemon({ id, name }) {\n  const [properties, setProperties] = useState(null);\n  // function loadInfo() {\n  //   // api\n  //   axios(`https://pokeapi.co/api/v2/pokemon/${id}/`).then(\n  //     (response) => {\n  //       console.log(response);\n  //       const { height, weight } = response.data;\n  //       setProperties({\n  //         height,\n  //         weight,\n  //       });\n  //     },\n  //     (reason) => {\n  //       console.log(\"error\", reason);\n  //     }\n  //   );\n  // }\n  async function loadInfo() {\n    try {\n      const response = await axios(`https://pokeapi.co/api/v2/pokemon/${id}/`);\n      const { height, weight } = response.data;\n      setProperties({\n        height,\n        weight,\n      });\n    } catch (reason) {\n      console.log(\"error\", reason);\n    }\n  }\n  return (\n    <div className=\"list__pokemon\">\n      <img\n        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`}\n        alt=\"pokemon_img\"\n        className=\"list__pokemon_img\"\n      />\n      <span className=\"list__pokemon_name\">{name}</span>\n      {properties === null ? (\n        <button onClick={loadInfo} className=\"list__properties_loadInfo\">\n          get info\n        </button>\n      ) : (\n        <Properties height={properties.height} weight={properties.weight} />\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./pagination.css\";\n\nexport function Pagination() {\n  const { page } = useParams();\n  return (\n    <div className='pagination'>\n      {page >= 1 && (\n        <a href={`/catalog/${Number(page) - 1}`} className='pagination__prev'>\n          previous\n        </a>\n      )}\n      <a href={`/catalog/${Number(page) + 1}`} className='pagination__next'>\n        next\n      </a>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Pokemon } from \"../Pokemon/Pokemon\";\nimport { Pagination } from \"../Pagination/Pagination\";\nimport { loadPokemons } from \"../../loadPokemons\";\nimport \"./list.css\";\n\nexport function List() {\n  const [pokemons, setPokemons] = useState([]);\n  const { page } = useParams();\n\n  useEffect(\n    function handleClick() {\n      loadPokemons(page).then((nextPokemons) => {\n        setPokemons((prev) => [...prev, ...nextPokemons]);\n      });\n    },\n    [page]\n  );\n\n  return (\n    <div className='list__wrapper'>\n      <Pagination />\n      {pokemons.map((pokemon) => (\n        <Pokemon key={pokemon.id} id={pokemon.id} name={pokemon.name} />\n      ))}\n    </div>\n  );\n}\n","import axios from \"axios\";\n\nfunction transformPokemonData(obj) {\n  let theId = obj.url.slice(34, -1);\n  return { name: obj.name, id: theId };\n}\n\nexport function loadPokemons(page) {\n  const limit = 5;\n  const offset = limit * page;\n  return axios(\n    `https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}`\n  ).then((response) => {\n    return response.data.results.map((obj) => transformPokemonData(obj));\n  });\n}\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { List } from \"./components/List/List\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <BrowserRouter>\n        <Route path='/catalog/:page' component={List} />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}